name: CI/CD Pipeline for Flask App # the name of the workflow

on: # the events that trigger the workflow
  push: # the push event
    branches: # the branches to run the workflow on
      - main
  pull_request: # the pull_request event
    branches: # the branches to run the workflow on
      - main

jobs: # the sequence of jobs to run
  # Job 1: Build and Test the Flask App
  build-and-test: # for building and testing the Flask app
    runs-on: ubuntu-latest # the runner to use

    steps: # the sequence of steps to run
    - name: Checkout code from repository # checkout the code from the repository
      uses: actions/checkout@v3 # checkout the code from the repository

    - name: Set up Python 3.10 # set up Python 3.10
      run: | # the shell commands to run
        sudo apt update
        sudo apt install python3.10
        python3.10 --version

    - name: Install dependencies # install the dependencies
      run: | # the shell commands to run
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test with pytest  # test the Flask app with pytest
      run: | # the shell commands to run, what pytest does is to run the tests in the file starting with name test_*.py, it will consider those as unit tests cases.
        pytest

  # Job 2: Build and Deploy the Flask App
  build-and-deploy: # for building and deploying the Flask app
    runs-on: ubuntu-latest # the runner to use
    needs: build-and-test # the job that this job depends on , if I remove this line, the job will run independently of the previous job.

    steps: # the sequence of steps to run
    - name: Checkout code # checkout the code from the repository
      uses: actions/checkout@v3

    - name: Setup up Docker Buildx # set up Docker Buildx, which is a CLI plugin that extends the Docker command with the full support of the features provided by Moby BuildKit builder toolkit.
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub # login to Docker Hub
      uses: docker/login-action@v2
      with: # the input parameters
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push Docker Image # build and push the Docker image
      uses: docker/build-push-action@v2
      with: # the input parameters
        context: . # the context to use
        file: ./DockerFile # the Dockerfile to use
        push: true # push the Docker image
        tags: ${{ secrets.DOCKER_USERNAME }}/flask-app:latest # the tags to use

    - name: Image digest # get the image digest
      run: echo ${{ steps.build-and-deploy.outputs.digest }}